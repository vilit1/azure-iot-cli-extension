# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.5, generator: @autorest/python@5.8.1)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DevicesOperations:
    """DevicesOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.iot.gateway.service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_devices(
        self,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> List["_models.Device"]:
        """Gets the identities of multiple devices from the IoT Hub identity registry. Not recommended.
        Use the IoT Hub query API to retrieve device twin and device identity information. See
        https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and
        https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more
        information.

        :param top: The maximum number of device identities returned by the query. Any value outside
         the range of 1-1000 is considered to be 1000.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Device, or the result of cls(response)
        :rtype: list[~azure.iot.gateway.service.models.Device]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.Device"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        accept = "application/json"

        # Construct URL
        url = self.get_devices.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if top is not None:
            query_parameters['top'] = self._serialize.query("top", top, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[Device]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_devices.metadata = {'url': '/devices'}  # type: ignore

    async def get_identity(
        self,
        id: str,
        **kwargs: Any
    ) -> "_models.Device":
        """Gets a device from the identity registry of the IoT Hub.

        :param id: The unique identifier of the device.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.Device
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Device"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        accept = "application/json"

        # Construct URL
        url = self.get_identity.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Device', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_identity.metadata = {'url': '/devices/{id}'}  # type: ignore

    async def create_or_update_identity(
        self,
        id: str,
        device: "_models.Device",
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.Device":
        """Creates or updates the identity of a device in the identity registry of the IoT Hub.

        :param id: The unique identifier of the device.
        :type id: str
        :param device: The contents of the device identity.
        :type device: ~azure.iot.gateway.service.models.Device
        :param if_match: The string representing a weak ETag for the device identity, as per RFC7232.
         This should not be set when creating a device, but may be set when updating a device.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.Device
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Device"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update_identity.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(device, 'Device')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Device', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update_identity.metadata = {'url': '/devices/{id}'}  # type: ignore

    async def delete_identity(
        self,
        id: str,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Deletes the identity of a device from the identity registry of the IoT Hub.

        :param id: The unique identifier of the device.
        :type id: str
        :param if_match: The string representing a weak ETag for the device identity, as per RFC7232.
         The delete operation is performed only if this ETag matches the value maintained by the server,
         indicating that the device identity has not been modified since it was last retrieved. To force
         an unconditional delete, set If-Match to the wildcard character (*).
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"

        # Construct URL
        url = self.delete_identity.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_identity.metadata = {'url': '/devices/{id}'}  # type: ignore

    async def get_twin(
        self,
        id: str,
        **kwargs: Any
    ) -> "_models.Twin":
        """Gets the device twin. See
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.

        :param id: The unique identifier of the device.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Twin, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.Twin
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Twin"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        accept = "application/json"

        # Construct URL
        url = self.get_twin.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Twin', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_twin.metadata = {'url': '/twins/{id}'}  # type: ignore

    async def replace_twin(
        self,
        id: str,
        device_twin_info: "_models.Twin",
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.Twin":
        """Replaces the tags and desired properties of a device twin. See
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.

        :param id: The unique identifier of the device.
        :type id: str
        :param device_twin_info: The device twin info that will replace the existing info.
        :type device_twin_info: ~azure.iot.gateway.service.models.Twin
        :param if_match: The string representing a weak ETag for the device twin, as per RFC7232. It
         determines if the replace operation should be carried out.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Twin, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.Twin
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Twin"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.replace_twin.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(device_twin_info, 'Twin')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Twin', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    replace_twin.metadata = {'url': '/twins/{id}'}  # type: ignore

    async def update_twin(
        self,
        id: str,
        device_twin_info: "_models.Twin",
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.Twin":
        """Updates the tags and desired properties of a device twin. See
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.

        :param id: The unique identifier of the device.
        :type id: str
        :param device_twin_info: The device twin info containing the tags and desired properties to be
         updated.
        :type device_twin_info: ~azure.iot.gateway.service.models.Twin
        :param if_match: The string representing a weak ETag for the device twin, as per RFC7232. It
         determines if the update operation should be carried out.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Twin, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.Twin
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Twin"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_twin.metadata['url']  # type: ignore
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(device_twin_info, 'Twin')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Twin', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_twin.metadata = {'url': '/twins/{id}'}  # type: ignore

    async def invoke_method(
        self,
        device_id: str,
        direct_method_request: "_models.CloudToDeviceMethod",
        **kwargs: Any
    ) -> "_models.CloudToDeviceMethodResult":
        """Invokes a direct method on a device. See
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information.

        :param device_id: The unique identifier of the device.
        :type device_id: str
        :param direct_method_request: The parameters to execute a direct method on the device.
        :type direct_method_request: ~azure.iot.gateway.service.models.CloudToDeviceMethod
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudToDeviceMethodResult, or the result of cls(response)
        :rtype: ~azure.iot.gateway.service.models.CloudToDeviceMethodResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.CloudToDeviceMethodResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-30-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.invoke_method.metadata['url']  # type: ignore
        path_format_arguments = {
            'deviceId': self._serialize.url("device_id", device_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(direct_method_request, 'CloudToDeviceMethod')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('CloudToDeviceMethodResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    invoke_method.metadata = {'url': '/twins/{deviceId}/methods'}  # type: ignore
