# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.5, generator: @autorest/python@5.8.3)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AuthenticationMechanism(msrest.serialization.Model):
    """AuthenticationMechanism.

    :param symmetric_key: The primary and secondary keys used for SAS based authentication.
    :type symmetric_key: ~iot_hub_gateway_service_apis.models.SymmetricKey
    :param x509_thumbprint: The primary and secondary x509 thumbprints used for x509 based
     authentication.
    :type x509_thumbprint: ~iot_hub_gateway_service_apis.models.X509Thumbprint
    :param type: The type of authentication used to connect to the service. Possible values
     include: "sas", "selfSigned", "certificateAuthority", "none".
    :type type: str or ~iot_hub_gateway_service_apis.models.AuthenticationMechanismType
    """

    _attribute_map = {
        'symmetric_key': {'key': 'symmetricKey', 'type': 'SymmetricKey'},
        'x509_thumbprint': {'key': 'x509Thumbprint', 'type': 'X509Thumbprint'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AuthenticationMechanism, self).__init__(**kwargs)
        self.symmetric_key = kwargs.get('symmetric_key', None)
        self.x509_thumbprint = kwargs.get('x509_thumbprint', None)
        self.type = kwargs.get('type', None)


class BulkRegistryOperationResult(msrest.serialization.Model):
    """The result of the bulk registry operation.

    :param is_successful: The operation result.
    :type is_successful: bool
    :param errors: The device registry operation errors.
    :type errors: list[~iot_hub_gateway_service_apis.models.DeviceRegistryOperationError]
    :param warnings: The device registry operation warnings.
    :type warnings: list[~iot_hub_gateway_service_apis.models.DeviceRegistryOperationWarning]
    """

    _attribute_map = {
        'is_successful': {'key': 'isSuccessful', 'type': 'bool'},
        'errors': {'key': 'errors', 'type': '[DeviceRegistryOperationError]'},
        'warnings': {'key': 'warnings', 'type': '[DeviceRegistryOperationWarning]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BulkRegistryOperationResult, self).__init__(**kwargs)
        self.is_successful = kwargs.get('is_successful', None)
        self.errors = kwargs.get('errors', None)
        self.warnings = kwargs.get('warnings', None)


class CloudToDeviceMethod(msrest.serialization.Model):
    """The parameters to execute a direct method on the device.

    :param method_name: The name of the method to execute.
    :type method_name: str
    :param payload: The JSON-formatted direct method payload, up to 128kb in size.
    :type payload: any
    :param response_timeout_in_seconds:
    :type response_timeout_in_seconds: int
    :param connect_timeout_in_seconds:
    :type connect_timeout_in_seconds: int
    """

    _attribute_map = {
        'method_name': {'key': 'methodName', 'type': 'str'},
        'payload': {'key': 'payload', 'type': 'object'},
        'response_timeout_in_seconds': {'key': 'responseTimeoutInSeconds', 'type': 'int'},
        'connect_timeout_in_seconds': {'key': 'connectTimeoutInSeconds', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudToDeviceMethod, self).__init__(**kwargs)
        self.method_name = kwargs.get('method_name', None)
        self.payload = kwargs.get('payload', None)
        self.response_timeout_in_seconds = kwargs.get('response_timeout_in_seconds', None)
        self.connect_timeout_in_seconds = kwargs.get('connect_timeout_in_seconds', None)


class CloudToDeviceMethodResult(msrest.serialization.Model):
    """Represents the Device Method Invocation Results.

    :param status: Method invocation result status.
    :type status: int
    :param payload: Method invocation result payload.
    :type payload: any
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'int'},
        'payload': {'key': 'payload', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudToDeviceMethodResult, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.payload = kwargs.get('payload', None)


class Configuration(msrest.serialization.Model):
    """The configuration for Iot Hub device and module twins.

    :param id: The unique identifier of the configuration.
    :type id: str
    :param schema_version: The schema version of the configuration.
    :type schema_version: str
    :param labels: The key-value pairs used to describe the configuration.
    :type labels: dict[str, str]
    :param content: The content of the configuration.
    :type content: ~iot_hub_gateway_service_apis.models.ConfigurationContent
    :param target_condition: The query used to define the targeted devices or modules. The query is
     based on twin tags and/or reported properties.
    :type target_condition: str
    :param created_time_utc: The creation date and time of the configuration.
    :type created_time_utc: ~datetime.datetime
    :param last_updated_time_utc: The update date and time of the configuration.
    :type last_updated_time_utc: ~datetime.datetime
    :param priority: The priority number assigned to the configuration.
    :type priority: int
    :param system_metrics: The system metrics computed by the IoT Hub that cannot be customized.
    :type system_metrics: ~iot_hub_gateway_service_apis.models.ConfigurationMetrics
    :param metrics: The custom metrics specified by the developer as queries against twin reported
     properties.
    :type metrics: ~iot_hub_gateway_service_apis.models.ConfigurationMetrics
    :param etag: The ETag of the configuration.
    :type etag: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'schema_version': {'key': 'schemaVersion', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '{str}'},
        'content': {'key': 'content', 'type': 'ConfigurationContent'},
        'target_condition': {'key': 'targetCondition', 'type': 'str'},
        'created_time_utc': {'key': 'createdTimeUtc', 'type': 'iso-8601'},
        'last_updated_time_utc': {'key': 'lastUpdatedTimeUtc', 'type': 'iso-8601'},
        'priority': {'key': 'priority', 'type': 'int'},
        'system_metrics': {'key': 'systemMetrics', 'type': 'ConfigurationMetrics'},
        'metrics': {'key': 'metrics', 'type': 'ConfigurationMetrics'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Configuration, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.schema_version = kwargs.get('schema_version', None)
        self.labels = kwargs.get('labels', None)
        self.content = kwargs.get('content', None)
        self.target_condition = kwargs.get('target_condition', None)
        self.created_time_utc = kwargs.get('created_time_utc', None)
        self.last_updated_time_utc = kwargs.get('last_updated_time_utc', None)
        self.priority = kwargs.get('priority', None)
        self.system_metrics = kwargs.get('system_metrics', None)
        self.metrics = kwargs.get('metrics', None)
        self.etag = kwargs.get('etag', None)


class ConfigurationContent(msrest.serialization.Model):
    """The configuration content for devices or modules on edge devices.

    :param device_content: The device configuration content.
    :type device_content: dict[str, any]
    :param modules_content: The modules configuration content.
    :type modules_content: dict[str, dict[str, any]]
    :param module_content: The module configuration content.
    :type module_content: dict[str, any]
    """

    _attribute_map = {
        'device_content': {'key': 'deviceContent', 'type': '{object}'},
        'modules_content': {'key': 'modulesContent', 'type': '{{object}}'},
        'module_content': {'key': 'moduleContent', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConfigurationContent, self).__init__(**kwargs)
        self.device_content = kwargs.get('device_content', None)
        self.modules_content = kwargs.get('modules_content', None)
        self.module_content = kwargs.get('module_content', None)


class ConfigurationMetrics(msrest.serialization.Model):
    """The configuration metrics for Iot Hub devices and modules.

    :param results: The results of the metrics collection queries.
    :type results: dict[str, long]
    :param queries: The key-value pairs with queries and their identifier.
    :type queries: dict[str, str]
    """

    _attribute_map = {
        'results': {'key': 'results', 'type': '{long}'},
        'queries': {'key': 'queries', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConfigurationMetrics, self).__init__(**kwargs)
        self.results = kwargs.get('results', None)
        self.queries = kwargs.get('queries', None)


class ConfigurationQueriesTestInput(msrest.serialization.Model):
    """ConfigurationQueriesTestInput.

    :param target_condition: The query used to define targeted devices or modules. The query is
     based on twin tags and/or reported properties.
    :type target_condition: str
    :param custom_metric_queries: The key-value pairs with queries and their identifier.
    :type custom_metric_queries: dict[str, str]
    """

    _attribute_map = {
        'target_condition': {'key': 'targetCondition', 'type': 'str'},
        'custom_metric_queries': {'key': 'customMetricQueries', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConfigurationQueriesTestInput, self).__init__(**kwargs)
        self.target_condition = kwargs.get('target_condition', None)
        self.custom_metric_queries = kwargs.get('custom_metric_queries', None)


class ConfigurationQueriesTestResponse(msrest.serialization.Model):
    """ConfigurationQueriesTestResponse.

    :param target_condition_error: The errors from running the target condition query.
    :type target_condition_error: str
    :param custom_metric_query_errors: The errors from running the custom metric query.
    :type custom_metric_query_errors: dict[str, str]
    """

    _attribute_map = {
        'target_condition_error': {'key': 'targetConditionError', 'type': 'str'},
        'custom_metric_query_errors': {'key': 'customMetricQueryErrors', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConfigurationQueriesTestResponse, self).__init__(**kwargs)
        self.target_condition_error = kwargs.get('target_condition_error', None)
        self.custom_metric_query_errors = kwargs.get('custom_metric_query_errors', None)


class Device(msrest.serialization.Model):
    """Device.

    :param device_id: The unique identifier of the device.
    :type device_id: str
    :param generation_id: The IoT Hub-generated, case-sensitive string up to 128 characters long.
     This value is used to distinguish devices with the same deviceId, when they have been deleted
     and re-created.
    :type generation_id: str
    :param etag: The string representing a weak ETag for the device identity, as per RFC7232.
    :type etag: str
    :param connection_state: The state of the device. Possible values include: "Disconnected",
     "Connected".
    :type connection_state: str or ~iot_hub_gateway_service_apis.models.DeviceConnectionState
    :param status: The status of the device. If the status disabled, a device cannot connect to the
     service. Possible values include: "enabled", "disabled".
    :type status: str or ~iot_hub_gateway_service_apis.models.DeviceStatus
    :param status_reason: The 128 character-long string that stores the reason for the device
     identity status. All UTF-8 characters are allowed.
    :type status_reason: str
    :param connection_state_updated_time: The date and time the connection state was last updated.
    :type connection_state_updated_time: ~datetime.datetime
    :param status_updated_time: The date and time when the status field was last updated.
    :type status_updated_time: ~datetime.datetime
    :param last_activity_time: The date and last time the device last connected, received, or sent
     a message.
    :type last_activity_time: ~datetime.datetime
    :param cloud_to_device_message_count: The number of cloud-to-device messages currently queued
     to be sent to the device.
    :type cloud_to_device_message_count: int
    :param authentication: The authentication mechanism used by the device.
    :type authentication: ~iot_hub_gateway_service_apis.models.AuthenticationMechanism
    :param capabilities: The set of capabilities of the device. For example, if this device is an
     edge device or not.
    :type capabilities: ~iot_hub_gateway_service_apis.models.DeviceCapabilities
    :param device_scope: The scope of the device. Auto generated and immutable for edge devices and
     modifiable in leaf devices to create child/parent relationship.
    :type device_scope: str
    :param parent_scopes: The scopes of the upper level edge devices if applicable. Only available
     for edge devices.
    :type parent_scopes: list[str]
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'generation_id': {'key': 'generationId', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_reason': {'key': 'statusReason', 'type': 'str'},
        'connection_state_updated_time': {'key': 'connectionStateUpdatedTime', 'type': 'iso-8601'},
        'status_updated_time': {'key': 'statusUpdatedTime', 'type': 'iso-8601'},
        'last_activity_time': {'key': 'lastActivityTime', 'type': 'iso-8601'},
        'cloud_to_device_message_count': {'key': 'cloudToDeviceMessageCount', 'type': 'int'},
        'authentication': {'key': 'authentication', 'type': 'AuthenticationMechanism'},
        'capabilities': {'key': 'capabilities', 'type': 'DeviceCapabilities'},
        'device_scope': {'key': 'deviceScope', 'type': 'str'},
        'parent_scopes': {'key': 'parentScopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Device, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.generation_id = kwargs.get('generation_id', None)
        self.etag = kwargs.get('etag', None)
        self.connection_state = kwargs.get('connection_state', None)
        self.status = kwargs.get('status', None)
        self.status_reason = kwargs.get('status_reason', None)
        self.connection_state_updated_time = kwargs.get('connection_state_updated_time', None)
        self.status_updated_time = kwargs.get('status_updated_time', None)
        self.last_activity_time = kwargs.get('last_activity_time', None)
        self.cloud_to_device_message_count = kwargs.get('cloud_to_device_message_count', None)
        self.authentication = kwargs.get('authentication', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.device_scope = kwargs.get('device_scope', None)
        self.parent_scopes = kwargs.get('parent_scopes', None)


class DeviceCapabilities(msrest.serialization.Model):
    """The status of capabilities enabled on the device.

    :param iot_edge: The property that determines if the device is an edge device or not.
    :type iot_edge: bool
    """

    _attribute_map = {
        'iot_edge': {'key': 'iotEdge', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceCapabilities, self).__init__(**kwargs)
        self.iot_edge = kwargs.get('iot_edge', None)


class DeviceJobStatistics(msrest.serialization.Model):
    """The job statistics regarding execution status.

    :param device_count: The number of devices targeted by the job.
    :type device_count: int
    :param failed_count: The number of failed jobs.
    :type failed_count: int
    :param succeeded_count: The number of succeeded jobs.
    :type succeeded_count: int
    :param running_count: The number of running jobs.
    :type running_count: int
    :param pending_count: The number of pending (scheduled) jobs.
    :type pending_count: int
    """

    _attribute_map = {
        'device_count': {'key': 'deviceCount', 'type': 'int'},
        'failed_count': {'key': 'failedCount', 'type': 'int'},
        'succeeded_count': {'key': 'succeededCount', 'type': 'int'},
        'running_count': {'key': 'runningCount', 'type': 'int'},
        'pending_count': {'key': 'pendingCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceJobStatistics, self).__init__(**kwargs)
        self.device_count = kwargs.get('device_count', None)
        self.failed_count = kwargs.get('failed_count', None)
        self.succeeded_count = kwargs.get('succeeded_count', None)
        self.running_count = kwargs.get('running_count', None)
        self.pending_count = kwargs.get('pending_count', None)


class DeviceRegistryOperationError(msrest.serialization.Model):
    """The device registry operation error details.

    :param device_id: The unique identifier of the device.
    :type device_id: str
    :param error_code: The error code. Possible values include: "InvalidErrorCode",
     "GenericBadRequest", "InvalidProtocolVersion", "DeviceInvalidResultCount", "InvalidOperation",
     "ArgumentInvalid", "ArgumentNull", "IotHubFormatError",
     "DeviceStorageEntitySerializationError", "BlobContainerValidationError",
     "ImportWarningExistsError", "InvalidSchemaVersion", "DeviceDefinedMultipleTimes",
     "DeserializationError", "BulkRegistryOperationFailure", "DefaultStorageEndpointNotConfigured",
     "InvalidFileUploadCorrelationId", "ExpiredFileUploadCorrelationId", "InvalidStorageEndpoint",
     "InvalidMessagingEndpoint", "InvalidFileUploadCompletionStatus",
     "InvalidStorageEndpointOrBlob", "RequestCanceled", "InvalidStorageEndpointProperty",
     "EtagDoesNotMatch", "RequestTimedOut", "UnsupportedOperationOnReplica", "NullMessage",
     "ConnectionForcefullyClosedOnNewConnection", "InvalidDeviceScope",
     "ConnectionForcefullyClosedOnFaultInjection", "ConnectionRejectedOnFaultInjection",
     "InvalidEndpointAuthenticationType", "ManagedIdentityNotEnabled", "InvalidRouteTestInput",
     "InvalidSourceOnRoute", "RoutingNotEnabled", "InvalidContentEncodingOrType",
     "InvalidEndorsementKey", "InvalidRegistrationId", "InvalidStorageRootKey",
     "InvalidEnrollmentGroupId", "TooManyEnrollments", "RegistrationIdDefinedMultipleTimes",
     "CustomAllocationFailed", "CustomAllocationIotHubNotSpecified",
     "CustomAllocationUnauthorizedAccess", "CannotRegisterModuleToModule",
     "TenantHubRoutingNotEnabled", "InvalidConfigurationTargetCondition",
     "InvalidConfigurationContent", "CannotModifyImmutableConfigurationContent",
     "InvalidConfigurationCustomMetricsQuery", "InvalidPnPInterfaceDefinition",
     "InvalidPnPDesiredProperties", "InvalidPnPReportedProperties",
     "InvalidPnPWritableReportedProperties", "InvalidDigitalTwinJsonPatch",
     "InvalidDigitalTwinPayload", "InvalidDigitalTwinPatch", "InvalidDigitalTwinPatchPath",
     "GenericUnauthorized", "IotHubNotFound", "IotHubUnauthorizedAccess", "IotHubUnauthorized",
     "ElasticPoolNotFound", "SystemModuleModifyUnauthorizedAccess", "GenericForbidden",
     "IotHubSuspended", "IotHubQuotaExceeded", "JobQuotaExceeded",
     "DeviceMaximumQueueDepthExceeded", "IotHubMaxCbsTokenExceeded",
     "DeviceMaximumActiveFileUploadLimitExceeded", "DeviceMaximumQueueSizeExceeded",
     "RoutingEndpointResponseForbidden", "InvalidMessageExpiryTime",
     "OperationNotAvailableInCurrentTier", "KeyEncryptionKeyRevoked",
     "DeviceModelMaxPropertiesExceeded", "DeviceModelMaxIndexablePropertiesExceeded",
     "IotDpsSuspended", "IotDpsSuspending", "GenericNotFound", "DeviceNotFound", "JobNotFound",
     "QuotaMetricNotFound", "SystemPropertyNotFound", "AmqpAddressNotFound",
     "RoutingEndpointResponseNotFound", "CertificateNotFound", "ElasticPoolTenantHubNotFound",
     "ModuleNotFound", "AzureTableStoreNotFound", "IotHubFailingOver", "FeatureNotSupported",
     "DigitalTwinInterfaceNotFound", "QueryStoreClusterNotFound", "DeviceNotOnline",
     "DeviceConnectionClosedRemotely", "EnrollmentNotFound", "DeviceRegistrationNotFound",
     "AsyncOperationNotFound", "EnrollmentGroupNotFound", "DeviceRecordNotFound",
     "GroupRecordNotFound", "DeviceGroupNotFound", "ProvisioningSettingsNotFound",
     "ProvisioningRecordNotFound", "LinkedHubNotFound", "CertificateAuthorityNotFound",
     "ConfigurationNotFound", "GroupNotFound", "DigitalTwinModelNotFound",
     "InterfaceNameModelNotFound", "GenericMethodNotAllowed", "OperationNotAllowedInCurrentState",
     "ImportDevicesNotSupported", "BulkAddDevicesNotSupported", "GenericConflict",
     "DeviceAlreadyExists", "LinkCreationConflict", "CallbackSubscriptionConflict",
     "ModelAlreadyExists", "DeviceLocked", "DeviceJobAlreadyExists", "JobAlreadyExists",
     "EnrollmentConflict", "EnrollmentGroupConflict", "RegistrationStatusConflict",
     "DeviceRecordConflict", "GroupRecordConflict", "DeviceGroupConflict",
     "ProvisioningSettingsConflict", "ProvisioningRecordConflict", "LinkedHubConflict",
     "CertificateAuthorityConflict", "ModuleAlreadyExistsOnDevice", "ConfigurationAlreadyExists",
     "ApplyConfigurationAlreadyInProgressOnDevice", "DigitalTwinModelAlreadyExists",
     "DigitalTwinModelExistsWithOtherModelType", "InterfaceNameModelAlreadyExists",
     "GenericPreconditionFailed", "PreconditionFailed", "DeviceMessageLockLost",
     "JobRunPreconditionFailed", "InflightMessagesInLink", "GenericRequestEntityTooLarge",
     "MessageTooLarge", "TooManyDevices", "TooManyModulesOnDevice",
     "ConfigurationCountLimitExceeded", "DigitalTwinModelCountLimitExceeded",
     "InterfaceNameCompressionModelCountLimitExceeded", "GenericUnsupportedMediaType",
     "IncompatibleDataType", "GenericTooManyRequests", "ThrottlingException",
     "ThrottleBacklogLimitExceeded", "ThrottlingBacklogTimeout",
     "ThrottlingMaxActiveJobCountExceeded", "DeviceThrottlingLimitExceeded", "ClientClosedRequest",
     "GenericServerError", "ServerError", "JobCancelled", "StatisticsRetrievalError",
     "ConnectionForcefullyClosed", "InvalidBlobState", "BackupTimedOut", "AzureStorageTimeout",
     "GenericTimeout", "InvalidThrottleParameter", "EventHubLinkAlreadyClosed",
     "ReliableBlobStoreError", "RetryAttemptsExhausted", "AzureTableStoreError",
     "CheckpointStoreNotFound", "DocumentDbInvalidReturnValue", "ReliableDocDbStoreStoreError",
     "ReliableBlobStoreTimeoutError", "ConfigReadFailed", "InvalidContainerReceiveLink",
     "InvalidPartitionEpoch", "RestoreTimedOut", "StreamReservationFailure", "SerializationError",
     "UnexpectedPropertyValue", "OrchestrationOperationFailed", "ModelRepoEndpointError",
     "ResolutionError", "UnableToFetchCredentials", "UnableToFetchTenantInfo",
     "UnableToShareIdentity", "UnableToExpandDiscoveryInfo", "UnableToExpandComponentInfo",
     "UnableToCompressComponentInfo", "UnableToCompressDiscoveryInfo", "OrphanDiscoveryDocument",
     "GenericBadGateway", "InvalidResponseWhileProxying", "GenericServiceUnavailable",
     "ServiceUnavailable", "PartitionNotFound", "IotHubActivationFailed", "ServerBusy",
     "IotHubRestoring", "ReceiveLinkOpensThrottled", "ConnectionUnavailable", "DeviceUnavailable",
     "ConfigurationNotAvailable", "GroupNotAvailable", "HostingServiceNotAvailable",
     "GenericGatewayTimeout", "GatewayTimeout".
    :type error_code: str or ~iot_hub_gateway_service_apis.models.DeviceRegistryOperationErrorCode
    :param error_status: The details of the error.
    :type error_status: str
    :param module_id: The unique identifier of the module, if applicable.
    :type module_id: str
    :param operation: The type of the operation that failed.
    :type operation: str
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_status': {'key': 'errorStatus', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceRegistryOperationError, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_status = kwargs.get('error_status', None)
        self.module_id = kwargs.get('module_id', None)
        self.operation = kwargs.get('operation', None)


class DeviceRegistryOperationWarning(msrest.serialization.Model):
    """The device registry operation warning details.

    :param device_id: The unique identifier of the device.
    :type device_id: str
    :param warning_code: The warning code. The only acceptable values to pass in are None and
     "DeviceRegisteredWithoutTwin". The default value is None.
    :type warning_code: str
    :param warning_status: The details of the warning.
    :type warning_status: str
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'warning_code': {'key': 'warningCode', 'type': 'str'},
        'warning_status': {'key': 'warningStatus', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceRegistryOperationWarning, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.warning_code = kwargs.get('warning_code', None)
        self.warning_status = kwargs.get('warning_status', None)


class ExportImportDevice(msrest.serialization.Model):
    """ExportImportDevice.

    :param id: The unique identifier of the device.
    :type id: str
    :param module_id: The unique identifier of the module, if applicable.
    :type module_id: str
    :param e_tag: The string representing a weak ETag for the device RFC7232. The value is only
     used if import mode is updateIfMatchETag, in that case the import operation is performed only
     if this ETag matches the value maintained by the server.
    :type e_tag: str
    :param import_mode: The type of registry operation and ETag preferences. Possible values
     include: "create", "update", "updateIfMatchETag", "delete", "deleteIfMatchETag", "updateTwin",
     "updateTwinIfMatchETag".
    :type import_mode: str or ~iot_hub_gateway_service_apis.models.ExportImportDeviceImportMode
    :param status: The status of the module. If disabled, the module cannot connect to the service.
     Possible values include: "enabled", "disabled".
    :type status: str or ~iot_hub_gateway_service_apis.models.ExportImportDeviceStatus
    :param status_reason: The 128 character-long string that stores the reason for the device
     identity status. All UTF-8 characters are allowed.
    :type status_reason: str
    :param authentication: The authentication mechanism used by the module. This parameter is
     optional and defaults to SAS if not provided. In that case, primary/secondary access keys are
     auto-generated.
    :type authentication: ~iot_hub_gateway_service_apis.models.AuthenticationMechanism
    :param twin_e_tag: The string representing a weak ETag for the device twin RFC7232. The value
     is only used if import mode is updateIfMatchETag, in that case the import operation is
     performed only if this ETag matches the value maintained by the server.
    :type twin_e_tag: str
    :param tags: A set of tags. The JSON document read and written by the solution back end. The
     tags are not visible to device apps.
    :type tags: dict[str, any]
    :param properties: The desired and reported properties for the device.
    :type properties: ~iot_hub_gateway_service_apis.models.PropertyContainer
    :param capabilities: The status of capabilities enabled on the device.
    :type capabilities: ~iot_hub_gateway_service_apis.models.DeviceCapabilities
    :param device_scope: The scope of the device.
    :type device_scope: str
    :param parent_scopes: The scopes of the upper level edge devices if applicable. Only available
     for edge devices.
    :type parent_scopes: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'import_mode': {'key': 'importMode', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_reason': {'key': 'statusReason', 'type': 'str'},
        'authentication': {'key': 'authentication', 'type': 'AuthenticationMechanism'},
        'twin_e_tag': {'key': 'twinETag', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'properties': {'key': 'properties', 'type': 'PropertyContainer'},
        'capabilities': {'key': 'capabilities', 'type': 'DeviceCapabilities'},
        'device_scope': {'key': 'deviceScope', 'type': 'str'},
        'parent_scopes': {'key': 'parentScopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExportImportDevice, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.module_id = kwargs.get('module_id', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.import_mode = kwargs.get('import_mode', None)
        self.status = kwargs.get('status', None)
        self.status_reason = kwargs.get('status_reason', None)
        self.authentication = kwargs.get('authentication', None)
        self.twin_e_tag = kwargs.get('twin_e_tag', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.device_scope = kwargs.get('device_scope', None)
        self.parent_scopes = kwargs.get('parent_scopes', None)


class JobProperties(msrest.serialization.Model):
    """JobProperties.

    :param job_id: The unique identifier of the job.
    :type job_id: str
    :param start_time_utc: System generated. Ignored at creation. The start date and time of the
     job in UTC.
    :type start_time_utc: ~datetime.datetime
    :param end_time_utc: System generated. Ignored at creation. The end date and time of the job in
     UTC.
    :type end_time_utc: ~datetime.datetime
    :param type: The job type. Possible values include: "unknown", "export", "import", "backup",
     "readDeviceProperties", "writeDeviceProperties", "updateDeviceConfiguration", "rebootDevice",
     "factoryResetDevice", "firmwareUpdate", "scheduleDeviceMethod", "scheduleUpdateTwin",
     "restoreFromBackup", "failoverDataCopy".
    :type type: str or ~iot_hub_gateway_service_apis.models.JobPropertiesType
    :param status: System generated. Ignored at creation. The status of the job. Possible values
     include: "unknown", "enqueued", "running", "completed", "failed", "cancelled", "scheduled",
     "queued".
    :type status: str or ~iot_hub_gateway_service_apis.models.JobPropertiesStatus
    :param progress: System generated. Ignored at creation. The percentage of job completion.
    :type progress: int
    :param input_blob_container_uri: The URI containing SAS token to a blob container that contains
     registry data to sync.
    :type input_blob_container_uri: str
    :param input_blob_name: The blob name to use when importing from the input blob container.
    :type input_blob_name: str
    :param output_blob_container_uri: The SAS token to access the blob container. This is used to
     output the status and results of the job.
    :type output_blob_container_uri: str
    :param output_blob_name: The blob name that will be created in the output blob container. This
     blob will contain the exported device registry information for the IoT Hub.
    :type output_blob_name: str
    :param exclude_keys_in_export: Optional for export jobs; ignored for other jobs. If not
     specified, the service defaults to false. If false, authorization keys are included in export
     output. Keys are exported as null otherwise.
    :type exclude_keys_in_export: bool
    :param storage_authentication_type: The authentication type used for connecting to the storage
     account. Possible values include: "keyBased", "identityBased".
    :type storage_authentication_type: str or
     ~iot_hub_gateway_service_apis.models.JobPropertiesStorageAuthenticationType
    :param identity:
    :type identity: ~iot_hub_gateway_service_apis.models.ManagedIdentity
    :param failure_reason: System genereated.  Ignored at creation. The reason for failure, if a
     failure occurred.
    :type failure_reason: str
    :param include_configurations: Defaults to false. If true, then configurations are included in
     the data export/import.
    :type include_configurations: bool
    :param configurations_blob_name: Defaults to configurations.txt. Specifies the name of the blob
     to use when exporting/importing configurations.
    :type configurations_blob_name: str
    """

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'start_time_utc': {'key': 'startTimeUtc', 'type': 'iso-8601'},
        'end_time_utc': {'key': 'endTimeUtc', 'type': 'iso-8601'},
        'type': {'key': 'type', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'progress': {'key': 'progress', 'type': 'int'},
        'input_blob_container_uri': {'key': 'inputBlobContainerUri', 'type': 'str'},
        'input_blob_name': {'key': 'inputBlobName', 'type': 'str'},
        'output_blob_container_uri': {'key': 'outputBlobContainerUri', 'type': 'str'},
        'output_blob_name': {'key': 'outputBlobName', 'type': 'str'},
        'exclude_keys_in_export': {'key': 'excludeKeysInExport', 'type': 'bool'},
        'storage_authentication_type': {'key': 'storageAuthenticationType', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'include_configurations': {'key': 'includeConfigurations', 'type': 'bool'},
        'configurations_blob_name': {'key': 'configurationsBlobName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobProperties, self).__init__(**kwargs)
        self.job_id = kwargs.get('job_id', None)
        self.start_time_utc = kwargs.get('start_time_utc', None)
        self.end_time_utc = kwargs.get('end_time_utc', None)
        self.type = kwargs.get('type', None)
        self.status = kwargs.get('status', None)
        self.progress = kwargs.get('progress', None)
        self.input_blob_container_uri = kwargs.get('input_blob_container_uri', None)
        self.input_blob_name = kwargs.get('input_blob_name', None)
        self.output_blob_container_uri = kwargs.get('output_blob_container_uri', None)
        self.output_blob_name = kwargs.get('output_blob_name', None)
        self.exclude_keys_in_export = kwargs.get('exclude_keys_in_export', None)
        self.storage_authentication_type = kwargs.get('storage_authentication_type', None)
        self.identity = kwargs.get('identity', None)
        self.failure_reason = kwargs.get('failure_reason', None)
        self.include_configurations = kwargs.get('include_configurations', None)
        self.configurations_blob_name = kwargs.get('configurations_blob_name', None)


class JobRequest(msrest.serialization.Model):
    """JobRequest.

    :param job_id: The unique identifier of the job.
    :type job_id: str
    :param type: The job type. Possible values include: "unknown", "export", "import", "backup",
     "readDeviceProperties", "writeDeviceProperties", "updateDeviceConfiguration", "rebootDevice",
     "factoryResetDevice", "firmwareUpdate", "scheduleDeviceMethod", "scheduleUpdateTwin",
     "restoreFromBackup", "failoverDataCopy".
    :type type: str or ~iot_hub_gateway_service_apis.models.JobRequestType
    :param cloud_to_device_method: The method type and parameters. This is required if the job type
     is cloudToDeviceMethod.
    :type cloud_to_device_method: ~iot_hub_gateway_service_apis.models.CloudToDeviceMethod
    :param update_twin: The state information for a device or module. This is implicitly created
     and deleted when the corresponding device/ module identity is created or deleted in the IoT
     Hub.
    :type update_twin: ~iot_hub_gateway_service_apis.models.Twin
    :param query_condition: The condition for devices to execute the job. This is required if the
     job type is updateTwin or cloudToDeviceMethod.
    :type query_condition: str
    :param start_time: The start date and time of the job in ISO 8601 standard.
    :type start_time: ~datetime.datetime
    :param max_execution_time_in_seconds: The maximum execution time in secounds.
    :type max_execution_time_in_seconds: long
    """

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'cloud_to_device_method': {'key': 'cloudToDeviceMethod', 'type': 'CloudToDeviceMethod'},
        'update_twin': {'key': 'updateTwin', 'type': 'Twin'},
        'query_condition': {'key': 'queryCondition', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'max_execution_time_in_seconds': {'key': 'maxExecutionTimeInSeconds', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobRequest, self).__init__(**kwargs)
        self.job_id = kwargs.get('job_id', None)
        self.type = kwargs.get('type', None)
        self.cloud_to_device_method = kwargs.get('cloud_to_device_method', None)
        self.update_twin = kwargs.get('update_twin', None)
        self.query_condition = kwargs.get('query_condition', None)
        self.start_time = kwargs.get('start_time', None)
        self.max_execution_time_in_seconds = kwargs.get('max_execution_time_in_seconds', None)


class JobResponse(msrest.serialization.Model):
    """JobResponse.

    :param job_id: System generated.  Ignored at creation. The unique identifier of the job.
    :type job_id: str
    :param query_condition: The device query condition.
    :type query_condition: str
    :param created_time: System generated.  Ignored at creation. The creation date and time of the
     job.
    :type created_time: ~datetime.datetime
    :param start_time: The start date and time of the scheduled job in UTC.
    :type start_time: ~datetime.datetime
    :param end_time: System generated.  Ignored at creation. The end date and time of the job in
     UTC.
    :type end_time: ~datetime.datetime
    :param max_execution_time_in_seconds: The maximum execution time in secounds.
    :type max_execution_time_in_seconds: long
    :param type: The job type. Possible values include: "unknown", "export", "import", "backup",
     "readDeviceProperties", "writeDeviceProperties", "updateDeviceConfiguration", "rebootDevice",
     "factoryResetDevice", "firmwareUpdate", "scheduleDeviceMethod", "scheduleUpdateTwin",
     "restoreFromBackup", "failoverDataCopy".
    :type type: str or ~iot_hub_gateway_service_apis.models.JobResponseType
    :param cloud_to_device_method: The method type and parameters. This is required if job type is
     cloudToDeviceMethod.
    :type cloud_to_device_method: ~iot_hub_gateway_service_apis.models.CloudToDeviceMethod
    :param update_twin: The state information for a device or module. This is implicitly created
     and deleted when the corresponding device/ module identity is created or deleted in the IoT
     Hub.
    :type update_twin: ~iot_hub_gateway_service_apis.models.Twin
    :param status: System generated.  Ignored at creation. The status of the job. Possible values
     include: "unknown", "enqueued", "running", "completed", "failed", "cancelled", "scheduled",
     "queued".
    :type status: str or ~iot_hub_gateway_service_apis.models.JobResponseStatus
    :param failure_reason: The reason for the failure, if a failure occurred.
    :type failure_reason: str
    :param status_message: The status message of the job.
    :type status_message: str
    :param device_job_statistics: The details regarding job execution status.
    :type device_job_statistics: ~iot_hub_gateway_service_apis.models.DeviceJobStatistics
    """

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'query_condition': {'key': 'queryCondition', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'max_execution_time_in_seconds': {'key': 'maxExecutionTimeInSeconds', 'type': 'long'},
        'type': {'key': 'type', 'type': 'str'},
        'cloud_to_device_method': {'key': 'cloudToDeviceMethod', 'type': 'CloudToDeviceMethod'},
        'update_twin': {'key': 'updateTwin', 'type': 'Twin'},
        'status': {'key': 'status', 'type': 'str'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'device_job_statistics': {'key': 'deviceJobStatistics', 'type': 'DeviceJobStatistics'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobResponse, self).__init__(**kwargs)
        self.job_id = kwargs.get('job_id', None)
        self.query_condition = kwargs.get('query_condition', None)
        self.created_time = kwargs.get('created_time', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.max_execution_time_in_seconds = kwargs.get('max_execution_time_in_seconds', None)
        self.type = kwargs.get('type', None)
        self.cloud_to_device_method = kwargs.get('cloud_to_device_method', None)
        self.update_twin = kwargs.get('update_twin', None)
        self.status = kwargs.get('status', None)
        self.failure_reason = kwargs.get('failure_reason', None)
        self.status_message = kwargs.get('status_message', None)
        self.device_job_statistics = kwargs.get('device_job_statistics', None)


class ManagedIdentity(msrest.serialization.Model):
    """ManagedIdentity.

    :param user_assigned_identity:
    :type user_assigned_identity: str
    """

    _attribute_map = {
        'user_assigned_identity': {'key': 'userAssignedIdentity', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ManagedIdentity, self).__init__(**kwargs)
        self.user_assigned_identity = kwargs.get('user_assigned_identity', None)


class Module(msrest.serialization.Model):
    """The module identity on a device.

    :param module_id: The unique identifier of the module.
    :type module_id: str
    :param managed_by: Identifies who manages this module. For instance, this value is \"IotEdge\"
     if the edge runtime owns this module.
    :type managed_by: str
    :param device_id: The unique identifier of the device.
    :type device_id: str
    :param generation_id: The IoT Hub generated, case-sensitive string up to 128 characters long.
     This value is used to distinguish modules with the same moduleId, when they have been deleted
     and re-created.
    :type generation_id: str
    :param etag: The string representing a weak ETag for the module identity, as per RFC7232.
    :type etag: str
    :param connection_state: The connection state of the device. Possible values include:
     "Disconnected", "Connected".
    :type connection_state: str or ~iot_hub_gateway_service_apis.models.ModuleConnectionState
    :param connection_state_updated_time: The date and time the connection state was last updated.
    :type connection_state_updated_time: ~datetime.datetime
    :param last_activity_time: The date and time the device last connected, received, or sent a
     message.
    :type last_activity_time: ~datetime.datetime
    :param cloud_to_device_message_count: The number of cloud-to-module messages currently queued
     to be sent to the module.
    :type cloud_to_device_message_count: int
    :param authentication: The authentication mechanism used by the module when connecting to the
     service and edge hub.
    :type authentication: ~iot_hub_gateway_service_apis.models.AuthenticationMechanism
    """

    _attribute_map = {
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'managed_by': {'key': 'managedBy', 'type': 'str'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'generation_id': {'key': 'generationId', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'connection_state_updated_time': {'key': 'connectionStateUpdatedTime', 'type': 'iso-8601'},
        'last_activity_time': {'key': 'lastActivityTime', 'type': 'iso-8601'},
        'cloud_to_device_message_count': {'key': 'cloudToDeviceMessageCount', 'type': 'int'},
        'authentication': {'key': 'authentication', 'type': 'AuthenticationMechanism'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Module, self).__init__(**kwargs)
        self.module_id = kwargs.get('module_id', None)
        self.managed_by = kwargs.get('managed_by', None)
        self.device_id = kwargs.get('device_id', None)
        self.generation_id = kwargs.get('generation_id', None)
        self.etag = kwargs.get('etag', None)
        self.connection_state = kwargs.get('connection_state', None)
        self.connection_state_updated_time = kwargs.get('connection_state_updated_time', None)
        self.last_activity_time = kwargs.get('last_activity_time', None)
        self.cloud_to_device_message_count = kwargs.get('cloud_to_device_message_count', None)
        self.authentication = kwargs.get('authentication', None)


class PropertyContainer(msrest.serialization.Model):
    """The desired and reported properties of the twin. The maximum depth of the object is 10.

    :param desired: The collection of desired property key-value pairs. The keys are UTF-8 encoded,
     case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control characters
     (segments C0 and C1), '.', '$' and space. The desired porperty values are JSON objects, up-to
     4KB in length.
    :type desired: dict[str, any]
    :param reported: The collection of reported property key-value pairs. The keys are UTF-8
     encoded, case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control
     characters (segments C0 and C1), '.', '$' and space. The reported property values are JSON
     objects, up-to 4KB in length.
    :type reported: dict[str, any]
    """

    _attribute_map = {
        'desired': {'key': 'desired', 'type': '{object}'},
        'reported': {'key': 'reported', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PropertyContainer, self).__init__(**kwargs)
        self.desired = kwargs.get('desired', None)
        self.reported = kwargs.get('reported', None)


class PurgeMessageQueueResult(msrest.serialization.Model):
    """The result of a device message queue purge operation.

    :param total_messages_purged:
    :type total_messages_purged: int
    :param device_id: The unique identifier of the device.
    :type device_id: str
    :param module_id: The unique identifier of the module.
    :type module_id: str
    """

    _attribute_map = {
        'total_messages_purged': {'key': 'totalMessagesPurged', 'type': 'int'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PurgeMessageQueueResult, self).__init__(**kwargs)
        self.total_messages_purged = kwargs.get('total_messages_purged', None)
        self.device_id = kwargs.get('device_id', None)
        self.module_id = kwargs.get('module_id', None)


class QueryResult(msrest.serialization.Model):
    """The query result.

    :param type: The query result type. Possible values include: "unknown", "twin", "deviceJob",
     "jobResponse", "raw", "enrollment", "enrollmentGroup", "deviceRegistration".
    :type type: str or ~iot_hub_gateway_service_apis.models.QueryResultType
    :param items: The query result items, as a collection.
    :type items: list[any]
    :param continuation_token: The continuation token.
    :type continuation_token: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'items': {'key': 'items', 'type': '[object]'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(QueryResult, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.items = kwargs.get('items', None)
        self.continuation_token = kwargs.get('continuation_token', None)


class QuerySpecification(msrest.serialization.Model):
    """The Json query request.

    :param query: The query string.
    :type query: str
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(QuerySpecification, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)


class RegistryStatistics(msrest.serialization.Model):
    """RegistryStatistics.

    :param total_device_count: The total number of devices registered for the IoT Hub.
    :type total_device_count: long
    :param enabled_device_count: The number of currently enabled devices.
    :type enabled_device_count: long
    :param disabled_device_count: The number of currently disabled devices.
    :type disabled_device_count: long
    """

    _attribute_map = {
        'total_device_count': {'key': 'totalDeviceCount', 'type': 'long'},
        'enabled_device_count': {'key': 'enabledDeviceCount', 'type': 'long'},
        'disabled_device_count': {'key': 'disabledDeviceCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RegistryStatistics, self).__init__(**kwargs)
        self.total_device_count = kwargs.get('total_device_count', None)
        self.enabled_device_count = kwargs.get('enabled_device_count', None)
        self.disabled_device_count = kwargs.get('disabled_device_count', None)


class ServiceStatistics(msrest.serialization.Model):
    """ServiceStatistics.

    :param connected_device_count: The number of currently connected devices.
    :type connected_device_count: long
    """

    _attribute_map = {
        'connected_device_count': {'key': 'connectedDeviceCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceStatistics, self).__init__(**kwargs)
        self.connected_device_count = kwargs.get('connected_device_count', None)


class SymmetricKey(msrest.serialization.Model):
    """SymmetricKey.

    :param primary_key: The base64 encoded primary key of the device.
    :type primary_key: str
    :param secondary_key: The base64 encoded secondary key of the device.
    :type secondary_key: str
    """

    _attribute_map = {
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SymmetricKey, self).__init__(**kwargs)
        self.primary_key = kwargs.get('primary_key', None)
        self.secondary_key = kwargs.get('secondary_key', None)


class TopicSpace(msrest.serialization.Model):
    """The state information for topicspace.

    :param name: The unique identifier of the topicspace for a given hub.
    :type name: str
    :param properties: Contains topicspace properties.
    :type properties: ~iot_hub_gateway_service_apis.models.TopicSpaceProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'TopicSpaceProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TopicSpace, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.properties = kwargs.get('properties', None)


class TopicSpaceProperties(msrest.serialization.Model):
    """TopicSpaceProperties.

    :param topicspace_type: The string representing the type of topicspace.
    
     Supported values are ``LowFanout``\ , ``HighFanout`` and ``PublishOnly``. Possible values
     include: "LowFanout", "HighFanout", "PublishOnly".
    :type topicspace_type: str or
     ~iot_hub_gateway_service_apis.models.TopicSpacePropertiesTopicspaceType
    :param topic_templates: List of topic templates in a given topicspace.
    
     For e.g. contoso/{principal.deviceid}/telemetry/#.
    :type topic_templates: list[str]
    """

    _attribute_map = {
        'topicspace_type': {'key': 'topicspaceType', 'type': 'str'},
        'topic_templates': {'key': 'topicTemplates', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TopicSpaceProperties, self).__init__(**kwargs)
        self.topicspace_type = kwargs.get('topicspace_type', None)
        self.topic_templates = kwargs.get('topic_templates', None)


class Twin(msrest.serialization.Model):
    """The state information for a device or module. This is implicitly created and deleted when the corresponding device/ module identity is created or deleted in the IoT Hub.

    :param device_id: The unique identifier of the device in the identity registry of the IoT Hub.
     It is a case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars, and the
     following special characters {'-', ':', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',',
     '=', '@', ';', '$', '''}.
    :type device_id: str
    :param module_id: The unique identifier of the module in the identity registry of the IoT Hub.
     It is a case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars, and the
     following special characters {'-', ':', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',',
     '=', '@', ';', '$', '''}.
    :type module_id: str
    :param tags: A set of tags. The collection of key-value pairs read and written by the solution
     back end. They are not visible to device apps. They keys are UTF-8 encoded, case-sensitive and
     up-to 1KB in length. Allowed characters exclude UNICODE control characters (segments C0 and
     C1), '.', '$' and space. The values are JSON objects, up-to 4KB in length.
    :type tags: dict[str, any]
    :param properties: The desired and reported properties of the twin.
    :type properties: ~iot_hub_gateway_service_apis.models.TwinProperties
    :param etag: The string representing a ETag for the device twin, as per RFC7232.
    :type etag: str
    :param version: The version for the device twin including tags and desired properties.
    :type version: long
    :param device_etag: The string representing a ETag for the device, as per RFC7232.
    :type device_etag: str
    :param status: The enabled status of the device. If disabled, the device cannot connect to the
     service. Possible values include: "enabled", "disabled".
    :type status: str or ~iot_hub_gateway_service_apis.models.TwinStatus
    :param status_reason: The reason for the current status of the device, if any.
    :type status_reason: str
    :param status_update_time: The date and time when the status of the device was last updated.
    :type status_update_time: ~datetime.datetime
    :param connection_state: The connection state of the device. Possible values include:
     "Disconnected", "Connected".
    :type connection_state: str or ~iot_hub_gateway_service_apis.models.TwinConnectionState
    :param last_activity_time: The date and time when the device last connected or received or sent
     a message. The date and time is sepecified in ISO8601 datetime format in UTC, for example,
     2015-01-28T16:24:48.789Z. This value is not updated if the device uses the HTTP/1 protocol to
     perform messaging operations.
    :type last_activity_time: ~datetime.datetime
    :param cloud_to_device_message_count: The number of cloud-to-device messages sent.
    :type cloud_to_device_message_count: int
    :param authentication_type: The authentication type used by the device. Possible values
     include: "sas", "selfSigned", "certificateAuthority", "none".
    :type authentication_type: str or ~iot_hub_gateway_service_apis.models.TwinAuthenticationType
    :param x509_thumbprint: The X509 thumbprint of the device.
    :type x509_thumbprint: ~iot_hub_gateway_service_apis.models.X509Thumbprint
    :param capabilities: The status of capabilities enabled on the device.
    :type capabilities: ~iot_hub_gateway_service_apis.models.DeviceCapabilities
    :param device_scope: The scope of the device.
    :type device_scope: str
    :param parent_scopes: The scopes of the upper level edge devices if applicable. Only available
     for edge devices.
    :type parent_scopes: list[str]
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'properties': {'key': 'properties', 'type': 'TwinProperties'},
        'etag': {'key': 'etag', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'device_etag': {'key': 'deviceEtag', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_reason': {'key': 'statusReason', 'type': 'str'},
        'status_update_time': {'key': 'statusUpdateTime', 'type': 'iso-8601'},
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'last_activity_time': {'key': 'lastActivityTime', 'type': 'iso-8601'},
        'cloud_to_device_message_count': {'key': 'cloudToDeviceMessageCount', 'type': 'int'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'x509_thumbprint': {'key': 'x509Thumbprint', 'type': 'X509Thumbprint'},
        'capabilities': {'key': 'capabilities', 'type': 'DeviceCapabilities'},
        'device_scope': {'key': 'deviceScope', 'type': 'str'},
        'parent_scopes': {'key': 'parentScopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Twin, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.module_id = kwargs.get('module_id', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.etag = kwargs.get('etag', None)
        self.version = kwargs.get('version', None)
        self.device_etag = kwargs.get('device_etag', None)
        self.status = kwargs.get('status', None)
        self.status_reason = kwargs.get('status_reason', None)
        self.status_update_time = kwargs.get('status_update_time', None)
        self.connection_state = kwargs.get('connection_state', None)
        self.last_activity_time = kwargs.get('last_activity_time', None)
        self.cloud_to_device_message_count = kwargs.get('cloud_to_device_message_count', None)
        self.authentication_type = kwargs.get('authentication_type', None)
        self.x509_thumbprint = kwargs.get('x509_thumbprint', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.device_scope = kwargs.get('device_scope', None)
        self.parent_scopes = kwargs.get('parent_scopes', None)


class TwinProperties(msrest.serialization.Model):
    """The desired and reported properties of the twin. The maximum depth of the object is 10.

    :param desired: The collection of desired property key-value pairs. The keys are UTF-8 encoded,
     case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control characters
     (segments C0 and C1), '.', '$' and space. The desired porperty values are JSON objects, up-to
     4KB in length.
    :type desired: dict[str, any]
    :param reported: The collection of reported property key-value pairs. The keys are UTF-8
     encoded, case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control
     characters (segments C0 and C1), '.', '$' and space. The reported property values are JSON
     objects, up-to 4KB in length.
    :type reported: dict[str, any]
    """

    _attribute_map = {
        'desired': {'key': 'desired', 'type': '{object}'},
        'reported': {'key': 'reported', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TwinProperties, self).__init__(**kwargs)
        self.desired = kwargs.get('desired', None)
        self.reported = kwargs.get('reported', None)


class X509Thumbprint(msrest.serialization.Model):
    """X509Thumbprint.

    :param primary_thumbprint: The X509 client certificate primary thumbprint.
    :type primary_thumbprint: str
    :param secondary_thumbprint: The X509 client certificate secondary thumbprint.
    :type secondary_thumbprint: str
    """

    _attribute_map = {
        'primary_thumbprint': {'key': 'primaryThumbprint', 'type': 'str'},
        'secondary_thumbprint': {'key': 'secondaryThumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509Thumbprint, self).__init__(**kwargs)
        self.primary_thumbprint = kwargs.get('primary_thumbprint', None)
        self.secondary_thumbprint = kwargs.get('secondary_thumbprint', None)
